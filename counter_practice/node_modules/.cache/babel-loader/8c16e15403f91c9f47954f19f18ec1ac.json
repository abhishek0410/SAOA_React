{"ast":null,"code":"import _classCallCheck from \"H:\\\\SAOA_React\\\\counter_practice\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\SAOA_React\\\\counter_practice\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\SAOA_React\\\\counter_practice\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\SAOA_React\\\\counter_practice\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\SAOA_React\\\\counter_practice\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\SAOA_React\\\\counter_practice\\\\src\\\\components\\\\counters.jsx\";\nimport React, { Component } from \"react\";\nimport Counter from './counter';\n\nvar Counters =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counters, _Component);\n\n  function Counters() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counters);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counters)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      counters: [{\n        id: 1,\n        value: 1\n      }, {\n        id: 2,\n        value: 2\n      }, {\n        id: 3,\n        value: 3\n      }, {\n        id: 4,\n        value: 4\n      }]\n    };\n\n    _this.handleReset = function () {\n      var temp_counters = _this.state.counters.map(function (temp) {\n        temp.value = 0;\n        return temp;\n      });\n\n      _this.setState({\n        counters: temp_counters\n      });\n    };\n\n    _this.Increment_the_counter = function (counter) {\n      console.log(\"IN increment the counter \", counter);\n    };\n\n    return _this;\n  }\n\n  _createClass(Counters, [{\n    key: \"deleteCounter\",\n    value: function deleteCounter(counter_id) {\n      var updated_counters = this.state.counters.filter(function (c) {\n        return c.id != counter_id;\n      });\n      this.setState({\n        counters: updated_counters\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleReset,\n        type: \"button\",\n        class: \"btn btn-primary btn-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"RESET\"), this.state.counters.map(function (temp_counter) {\n        return React.createElement(Counter, {\n          key: temp_counter.id,\n          handleIncrement: function handleIncrement() {\n            return _this2.Increment_the_counter(temp);\n          },\n          handleDelete: function handleDelete() {\n            _this2.deleteCounter(temp_counter.id);\n          },\n          counter: temp_counter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Counters;\n}(Component);\n\nexport default Counters;","map":{"version":3,"sources":["H:\\SAOA_React\\counter_practice\\src\\components\\counters.jsx"],"names":["React","Component","Counter","Counters","state","counters","id","value","handleReset","temp_counters","map","temp","setState","Increment_the_counter","counter","console","log","counter_id","updated_counters","filter","c","temp_counter","deleteCounter"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,Q;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,QAAQ,EAAI,CACR;AAACC,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAG;AAAhB,OADQ,EAER;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAG;AAAhB,OAFQ,EAGR;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAG;AAAhB,OAHQ,EAIR;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAG;AAAhB,OAJQ;AADR,K;;UAQRC,W,GAAY,YAAI;AAEhB,UAAMC,aAAa,GAAG,MAAKL,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwB,UAACC,IAAD,EAAQ;AAClDA,QAAAA,IAAI,CAACJ,KAAL,GAAa,CAAb;AACA,eAAOI,IAAP;AAAY,OAFM,CAAtB;;AAGI,YAAKC,QAAL,CAAc;AAACP,QAAAA,QAAQ,EAACI;AAAV,OAAd;AACH,K;;UACDI,qB,GAAsB,UAACC,OAAD,EAAW;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCF,OAAxC;AACH,K;;;;;;;kCAGaG,U,EAAW;AACrB,UAAMC,gBAAgB,GAAG,KAAKd,KAAL,CAAWC,QAAX,CAAoBc,MAApB,CAA2B,UAACC,CAAD;AAAA,eAAMA,CAAC,CAACd,EAAF,IAAMW,UAAZ;AAAA,OAA3B,CAAzB;AACA,WAAKL,QAAL,CAAc;AAACP,QAAAA,QAAQ,EAAGa;AAAZ,OAAd;AAEH;;;6BAEO;AAAA;;AAEJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAI,KAAKV,WAAxB;AAAqC,QAAA,IAAI,EAAC,QAA1C;AAAmD,QAAA,KAAK,EAAC,wBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEK,KAAKJ,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwB,UAACW,YAAD;AAAA,eACzB,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAGA,YAAY,CAACf,EAA5B;AACA,UAAA,eAAe,EAAG;AAAA,mBAAI,MAAI,CAACO,qBAAL,CAA2BF,IAA3B,CAAJ;AAAA,WADlB;AAEA,UAAA,YAAY,EAAG,wBAAI;AAAC,YAAA,MAAI,CAACW,aAAL,CAAmBD,YAAY,CAACf,EAAhC;AAAoC,WAFxD;AAGA,UAAA,OAAO,EAAIe,YAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADyB;AAAA,OAAxB,CAFL,CADJ;AAaH;;;;EA3CkBpB,S;;AA8CvB,eAAeE,QAAf","sourcesContent":["import React , {Component} from \"react\";\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component{\r\n    \r\n    state = {\r\n        counters :  [\r\n            {id :1 ,value : 1 },\r\n            {id :2 ,value : 2 },\r\n            {id :3 ,value : 3 },\r\n            {id :4 ,value : 4 }\r\n        ],\r\n}\r\n    handleReset=()=>{\r\n         \r\n    const temp_counters = this.state.counters.map((temp)=>{\r\n        temp.value = 0; \r\n        return temp});\r\n        this.setState({counters:temp_counters});\r\n    }\r\n    Increment_the_counter=(counter)=>{\r\n        console.log(\"IN increment the counter \",counter);\r\n    }\r\n\r\n  \r\n    deleteCounter(counter_id){\r\n        const updated_counters = this.state.counters.filter((c)=>(c.id!=counter_id));\r\n        this.setState({counters : updated_counters})\r\n       \r\n    }\r\n    \r\n    render(){\r\n    \r\n        return(\r\n            <div>\r\n                <button onClick = {this.handleReset} type=\"button\" class=\"btn btn-primary btn-lg\">RESET</button>\r\n                {this.state.counters.map((temp_counter)=>(\r\n                <Counter key ={temp_counter.id} \r\n                handleIncrement ={()=>this.Increment_the_counter(temp)} \r\n                handleDelete ={()=>{this.deleteCounter(temp_counter.id)}}\r\n                counter = {temp_counter} ></Counter>\r\n               \r\n                ))}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counters;"]},"metadata":{},"sourceType":"module"}